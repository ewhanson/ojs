<?php

/**
 * @file tests/jobs/orcid/DepositOrcidSubmissionTest.php
 *
 * Copyright (c) 2014-2024 Simon Fraser University
 * Copyright (c) 2000-2024 John Willinsky
 * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.
 *
 * @brief Tests for the deposit ORCID submission job.
 */

namespace APP\tests\jobs\orcid;

use PKP\jobs\orcid\DepositOrcidSubmission;
use PKP\tests\PKPTestCase;

/**
 * @runTestsInSeparateProcesses
 *
 * @see https://docs.phpunit.de/en/9.6/annotations.html#runtestsinseparateprocesses
 */
class DepositOrcidSubmissionTest extends PKPTestCase
{
    /**
     * base64_encoded serialization from OJS 3.5.0
     */
    protected string $serializedJobData = 'TzozNzoiUEtQXGpvYnNcb3JjaWRcRGVwb3NpdE9yY2lkU3VibWlzc2lvbiI6Njp7czo0NToiAFBLUFxqb2JzXG9yY2lkXERlcG9zaXRPcmNpZFN1Ym1pc3Npb24AYXV0aG9yIjtPOjE3OiJBUFBcYXV0aG9yXEF1dGhvciI6Nzp7czo1OiJfZGF0YSI7YToxNzp7czoyOiJpZCI7aToyNjtzOjU6ImVtYWlsIjtzOjI3OiJ2a2FyYmFzaXphZWRAbWFpbGluYXRvci5jb20iO3M6MTU6ImluY2x1ZGVJbkJyb3dzZSI7YjoxO3M6MTM6InB1YmxpY2F0aW9uSWQiO2k6MTg7czozOiJzZXEiO2k6MDtzOjExOiJ1c2VyR3JvdXBJZCI7aToxNDtzOjc6ImNvdW50cnkiO3M6MjoiSVIiO3M6NToib3JjaWQiO3M6Mzc6Imh0dHBzOi8vb3JjaWQub3JnLzAwMDAtMDAwMi0xODI1LTAwOTciO3M6MjA6Im9yY2lkQWNjZXNzRXhwaXJlc09uIjtzOjE5OiIyMDQ0LTA3LTA1IDE2OjIxOjA0IjtzOjE2OiJvcmNpZEFjY2Vzc1Njb3BlIjtzOjE4OiIvYWN0aXZpdGllcy91cGRhdGUiO3M6MTY6Im9yY2lkQWNjZXNzVG9rZW4iO3M6MjA6Inh4eHgteHh4eC14eHh4eC14eHh4IjtzOjE1OiJvcmNpZElzVmVyaWZpZWQiO2I6MTtzOjE3OiJvcmNpZFJlZnJlc2hUb2tlbiI7czoxOToieHh4eC14eHh4LXh4eHgteHh4eCI7czoxMToiYWZmaWxpYXRpb24iO2E6MTp7czoyOiJlbiI7czoyMDoiVW5pdmVyc2l0eSBvZiBUZWhyYW4iO31zOjEwOiJmYW1pbHlOYW1lIjthOjE6e3M6MjoiZW4iO3M6MTE6IkthcmJhc2l6YWVkIjt9czo5OiJnaXZlbk5hbWUiO2E6MTp7czoyOiJlbiI7czo3OiJWYWppaGVoIjt9czo2OiJsb2NhbGUiO3M6MjoiZW4iO31zOjIwOiJfaGFzTG9hZGFibGVBZGFwdGVycyI7YjowO3M6Mjc6Il9tZXRhZGF0YUV4dHJhY3Rpb25BZGFwdGVycyI7YTowOnt9czoyNToiX2V4dHJhY3Rpb25BZGFwdGVyc0xvYWRlZCI7YjowO3M6MjY6Il9tZXRhZGF0YUluamVjdGlvbkFkYXB0ZXJzIjthOjA6e31zOjI0OiJfaW5qZWN0aW9uQWRhcHRlcnNMb2FkZWQiO2I6MDtzOjEzOiJfbG9jYWxlc1RhYmxlIjthOjk6e3M6MTE6ImJlQGN5cmlsbGljIjtzOjI6ImJlIjtzOjI6ImJzIjtzOjc6ImJzX0xhdG4iO3M6NToiZnJfRlIiO3M6MjoiZnIiO3M6MjoibmIiO3M6NToibmJfTk8iO3M6MTE6InNyQGN5cmlsbGljIjtzOjc6InNyX0N5cmwiO3M6ODoic3JAbGF0aW4iO3M6Nzoic3JfTGF0biI7czoxMToidXpAY3lyaWxsaWMiO3M6MjoidXoiO3M6ODoidXpAbGF0aW4iO3M6NzoidXpfTGF0biI7czo1OiJ6aF9DTiI7czo3OiJ6aF9IYW5zIjt9fXM6NDY6IgBQS1Bcam9ic1xvcmNpZFxEZXBvc2l0T3JjaWRTdWJtaXNzaW9uAGNvbnRleHQiO086MTk6IkFQUFxqb3VybmFsXEpvdXJuYWwiOjc6e3M6NToiX2RhdGEiO2E6Nzk6e3M6MjoiaWQiO2k6MTtzOjc6InVybFBhdGgiO3M6MTU6InB1YmxpY2tub3dsZWRnZSI7czo3OiJlbmFibGVkIjtiOjE7czozOiJzZXEiO2k6MTtzOjEzOiJwcmltYXJ5TG9jYWxlIjtzOjI6ImVuIjtzOjE0OiJjdXJyZW50SXNzdWVJZCI7aToxO3M6NzoiYWNyb255bSI7YToxOntzOjI6ImVuIjtzOjY6IkpQS0pQSyI7fXM6MTY6ImF1dGhvckd1aWRlbGluZXMiO2E6Mjp7czoyOiJlbiI7czoxMjA5OiI8cD5BdXRob3JzIGFyZSBpbnZpdGVkIHRvIG1ha2UgYSBzdWJtaXNzaW9uIHRvIHRoaXMgam91cm5hbC4gQWxsIHN1Ym1pc3Npb25zIHdpbGwgYmUgYXNzZXNzZWQgYnkgYW4gZWRpdG9yIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgbWVldCB0aGUgYWltcyBhbmQgc2NvcGUgb2YgdGhpcyBqb3VybmFsLiBUaG9zZSBjb25zaWRlcmVkIHRvIGJlIGEgZ29vZCBmaXQgd2lsbCBiZSBzZW50IGZvciBwZWVyIHJldmlldyBiZWZvcmUgZGV0ZXJtaW5pbmcgd2hldGhlciB0aGV5IHdpbGwgYmUgYWNjZXB0ZWQgb3IgcmVqZWN0ZWQuPC9wPjxwPkJlZm9yZSBtYWtpbmcgYSBzdWJtaXNzaW9uLCBhdXRob3JzIGFyZSByZXNwb25zaWJsZSBmb3Igb2J0YWluaW5nIHBlcm1pc3Npb24gdG8gcHVibGlzaCBhbnkgbWF0ZXJpYWwgaW5jbHVkZWQgd2l0aCB0aGUgc3VibWlzc2lvbiwgc3VjaCBhcyBwaG90b3MsIGRvY3VtZW50cyBhbmQgZGF0YXNldHMuIEFsbCBhdXRob3JzIGlkZW50aWZpZWQgb24gdGhlIHN1Ym1pc3Npb24gbXVzdCBjb25zZW50IHRvIGJlIGlkZW50aWZpZWQgYXMgYW4gYXV0aG9yLiBXaGVyZSBhcHByb3ByaWF0ZSwgcmVzZWFyY2ggc2hvdWxkIGJlIGFwcHJvdmVkIGJ5IGFuIGFwcHJvcHJpYXRlIGV0aGljcyBjb21taXR0ZWUgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsZWdhbCByZXF1aXJlbWVudHMgb2YgdGhlIHN0dWR5J3MgY291bnRyeS48L3A+PHA+QW4gZWRpdG9yIG1heSBkZXNrIHJlamVjdCBhIHN1Ym1pc3Npb24gaWYgaXQgZG9lcyBub3QgbWVldCBtaW5pbXVtIHN0YW5kYXJkcyBvZiBxdWFsaXR5LiBCZWZvcmUgc3VibWl0dGluZywgcGxlYXNlIGVuc3VyZSB0aGF0IHRoZSBzdHVkeSBkZXNpZ24gYW5kIHJlc2VhcmNoIGFyZ3VtZW50IGFyZSBzdHJ1Y3R1cmVkIGFuZCBhcnRpY3VsYXRlZCBwcm9wZXJseS4gVGhlIHRpdGxlIHNob3VsZCBiZSBjb25jaXNlIGFuZCB0aGUgYWJzdHJhY3Qgc2hvdWxkIGJlIGFibGUgdG8gc3RhbmQgb24gaXRzIG93bi4gVGhpcyB3aWxsIGluY3JlYXNlIHRoZSBsaWtlbGlob29kIG9mIHJldmlld2VycyBhZ3JlZWluZyB0byByZXZpZXcgdGhlIHBhcGVyLiBXaGVuIHlvdSdyZSBzYXRpc2ZpZWQgdGhhdCB5b3VyIHN1Ym1pc3Npb24gbWVldHMgdGhpcyBzdGFuZGFyZCwgcGxlYXNlIGZvbGxvdyB0aGUgY2hlY2tsaXN0IGJlbG93IHRvIHByZXBhcmUgeW91ciBzdWJtaXNzaW9uLjwvcD4iO3M6NToiZnJfQ0EiO3M6MTUxNjoiPHA+TGVzIGF1dGV1ci5lLnMgc29udCBpbnZpdMOpLmUucyDDoCBzb3VtZXR0cmUgdW4gYXJ0aWNsZSDDoCBjZXR0ZSByZXZ1ZS4gVG91dGVzIGxlcyBzb3VtaXNzaW9ucyBzZXJvbnQgw6l2YWx1w6llcyBwYXIgdW4uZSByw6lkYWN0ZXVyLnRyaWNlIGFmaW4gZGUgZMOpdGVybWluZXIgc2kgZWxsZXMgY29ycmVzcG9uZGVudCBhdXggb2JqZWN0aWZzIGV0IGF1IGNoYW1wIGQnYXBwbGljYXRpb24gZGUgY2V0dGUgcmV2dWUuIENldXggY29uc2lkw6lyw6lzIGNvbW1lIMOpdGFudCBhcHByb3ByacOpcyBzZXJvbnQgZW52b3nDqXMgw6AgZGVzIHBhaXJzIHBvdXIgZXhhbWVuIGF2YW50IGRlIGTDqWNpZGVyIHMnaWxzIHNlcm9udCBhY2NlcHTDqXMgb3UgcmVqZXTDqXMuPC9wPjxwPkF2YW50IGRlIHNvdW1ldHRyZSBsZXVyIGFydGljbGUsIGxlcyBhdXRldXIuZS5zIHNvbnQgcmVzcG9uc2FibGVzIGQnb2J0ZW5pciBsJ2F1dG9yaXNhdGlvbiBkZSBwdWJsaWVyIHRvdXQgbWF0w6lyaWVsIGluY2x1cyBkYW5zIGxhIHNvdW1pc3Npb24sIHRlbHMgcXVlIGRlcyBwaG90b3MsIGRlcyBkb2N1bWVudHMgZXQgZGVzIGVuc2VtYmxlcyBkZSBkb25uw6llcy4gVG91cyBsZXMgYXV0ZXVyLmUucyBpZGVudGlmacOpLmUucyBkYW5zIGxhIHNvdW1pc3Npb24gZG9pdmVudCBjb25zZW50aXIgw6Agw6p0cmUgaWRlbnRpZmnDqS5lLnMgY29tbWUgYXV0ZXVyLmUucy4gTG9yc3F1ZSBjZWxhIGVzdCBhcHByb3ByacOpLCBsYSByZWNoZXJjaGUgZG9pdCDDqnRyZSBhcHByb3V2w6llIHBhciB1biBjb21pdMOpIGQnw6l0aGlxdWUgYXBwcm9wcmnDqSBjb25mb3Jtw6ltZW50IGF1eCBleGlnZW5jZXMgbMOpZ2FsZXMgZHUgcGF5cyBkZSBsJ8OpdHVkZS48L3A+PHA+VW4uZSByw6lkYWN0ZXVyLnRyaWNlIHBldXQgcmVqZXRlciB1bmUgc291bWlzc2lvbiBzYW5zIGV4YW1lbiBhcHByb2ZvbmRpIHMnaWwgbmUgcsOpcG9uZCBwYXMgYXV4IG5vcm1lcyBtaW5pbWFsZXMgZGUgcXVhbGl0w6kuIEF2YW50IGRlIHNvdW1ldHRyZSB2b3RyZSBhcnRpY2xlLCB2ZXVpbGxleiB2b3VzIGFzc3VyZXIgcXVlIGxhIGNvbmNlcHRpb24gZGUgbCfDqXR1ZGUgZXQgbCdhcmd1bWVudCBkZSByZWNoZXJjaGUgc29udCBzdHJ1Y3R1csOpcyBldCBhcnRpY3Vsw6lzIGNvcnJlY3RlbWVudC4gTGUgdGl0cmUgZG9pdCDDqnRyZSBjb25jaXMgZXQgbGUgcsOpc3Vtw6kgZG9pdCBwb3V2b2lyIMOqdHJlIGNvbXByaXMgaW5kw6lwZW5kYW1tZW50IGR1IHJlc3RlIGR1IHRleHRlLiBDZWxhIGF1Z21lbnRlcmEgbGEgcHJvYmFiaWxpdMOpIHF1ZSBsZXMgw6l2YWx1YXRldXIudHJpY2UucyBhY2NlcHRlbnQgZCdleGFtaW5lciBsJ2FydGljbGUuIExvcnNxdWUgdm91cyDDqnRlcyBjb25maWFudC5lIHF1ZSB2b3RyZSBhcnRpY2xlIHLDqXBvbmQgw6AgY2VzIGV4aWdlbmNlcywgdm91cyBwb3V2ZXogc3VpdnJlIGxhIGxpc3RlIGRlIGNvbnRyw7RsZSBjaS1kZXNzb3VzIHBvdXIgcHLDqXBhcmVyIHZvdHJlIHNvdW1pc3Npb24uPC9wPiI7fXM6MTc6ImF1dGhvckluZm9ybWF0aW9uIjthOjI6e3M6MjoiZW4iO3M6NTg2OiJJbnRlcmVzdGVkIGluIHN1Ym1pdHRpbmcgdG8gdGhpcyBqb3VybmFsPyBXZSByZWNvbW1lbmQgdGhhdCB5b3UgcmV2aWV3IHRoZSA8YSBocmVmPSJodHRwOi8vbG9jYWxob3N0L2luZGV4LnBocC9wdWJsaWNrbm93bGVkZ2UvYWJvdXQiPkFib3V0IHRoZSBKb3VybmFsPC9hPiBwYWdlIGZvciB0aGUgam91cm5hbCdzIHNlY3Rpb24gcG9saWNpZXMsIGFzIHdlbGwgYXMgdGhlIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hYm91dC9zdWJtaXNzaW9ucyNhdXRob3JHdWlkZWxpbmVzIj5BdXRob3IgR3VpZGVsaW5lczwvYT4uIEF1dGhvcnMgbmVlZCB0byA8YSBocmVmPSJodHRwOi8vbG9jYWxob3N0L2luZGV4LnBocC9wdWJsaWNrbm93bGVkZ2UvdXNlci9yZWdpc3RlciI+cmVnaXN0ZXI8L2E+IHdpdGggdGhlIGpvdXJuYWwgcHJpb3IgdG8gc3VibWl0dGluZyBvciwgaWYgYWxyZWFkeSByZWdpc3RlcmVkLCBjYW4gc2ltcGx5IDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL2luZGV4L2xvZ2luIj5sb2cgaW48L2E+IGFuZCBiZWdpbiB0aGUgZml2ZS1zdGVwIHByb2Nlc3MuIjtzOjU6ImZyX0NBIjtzOjcxNToiSW50w6lyZXNzw6ktZSDDoCBzb3VtZXR0cmUgw6AgY2V0dGUgcmV2dWUgPyBOb3VzIHZvdXMgcmVjb21tYW5kb25zIGRlIGNvbnN1bHRlciBsZXMgcG9saXRpcXVlcyBkZSBydWJyaXF1ZSBkZSBsYSByZXZ1ZSDDoCBsYSBwYWdlIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hYm91dCI+w4AgcHJvcG9zIGRlIGxhIHJldnVlPC9hPiBhaW5zaSBxdWUgbGVzIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hYm91dC9zdWJtaXNzaW9ucyNhdXRob3JHdWlkZWxpbmVzIj5EaXJlY3RpdmVzIGF1eCBhdXRldXJzPC9hPi4gTGVzIGF1dGV1cnMtZXMgZG9pdmVudCA8YSBocmVmPSJodHRwOi8vbG9jYWxob3N0L2luZGV4LnBocC9wdWJsaWNrbm93bGVkZ2UvdXNlci9yZWdpc3RlciI+cydpbnNjcmlyZTwvYT4gYXVwcsOocyBkZSBsYSByZXZ1ZSBhdmFudCBkZSBwcsOpc2VudGVyIHVuZSBzb3VtaXNzaW9uLCBvdSBzJ2lscyBldCBlbGxlcyBzb250IGTDqWrDoCBpbnNjcml0cy1lcywgc2ltcGxlbWVudCA8YSBocmVmPSJodHRwOi8vbG9jYWxob3N0L2luZGV4LnBocC9wdWJsaWNrbm93bGVkZ2UvbG9naW4iPm91dnJpciB1bmUgc2Vzc2lvbjwvYT4gZXQgYWNjw6lkZXIgYXUgdGFibGVhdSBkZSBib3JkIHBvdXIgY29tbWVuY2VyIGxlcyA1IMOpdGFwZXMgZHUgcHJvY2Vzc3VzLiI7fXM6MTk6ImJlZ2luU3VibWlzc2lvbkhlbHAiO2E6Mjp7czoyOiJlbiI7czo2MTE6IjxwPlRoYW5rIHlvdSBmb3Igc3VibWl0dGluZyB0byB0aGUgSm91cm5hbCBvZiBQdWJsaWMgS25vd2xlZGdlLiBZb3Ugd2lsbCBiZSBhc2tlZCB0byB1cGxvYWQgZmlsZXMsIGlkZW50aWZ5IGNvLWF1dGhvcnMsIGFuZCBwcm92aWRlIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHRpdGxlIGFuZCBhYnN0cmFjdC48cD48cD5QbGVhc2UgcmVhZCBvdXIgPGEgaHJlZj0iaHR0cDovL2xvY2FsaG9zdC9pbmRleC5waHAvcHVibGlja25vd2xlZGdlL2Fib3V0L3N1Ym1pc3Npb25zIiB0YXJnZXQ9Il9ibGFuayI+U3VibWlzc2lvbiBHdWlkZWxpbmVzPC9hPiBpZiB5b3UgaGF2ZSBub3QgZG9uZSBzbyBhbHJlYWR5LiBXaGVuIGZpbGxpbmcgb3V0IHRoZSBmb3JtcywgcHJvdmlkZSBhcyBtYW55IGRldGFpbHMgYXMgcG9zc2libGUgaW4gb3JkZXIgdG8gaGVscCBvdXIgZWRpdG9ycyBldmFsdWF0ZSB5b3VyIHdvcmsuPC9wPjxwPk9uY2UgeW91IGJlZ2luLCB5b3UgY2FuIHNhdmUgeW91ciBzdWJtaXNzaW9uIGFuZCBjb21lIGJhY2sgdG8gaXQgbGF0ZXIuIFlvdSB3aWxsIGJlIGFibGUgdG8gcmV2aWV3IGFuZCBjb3JyZWN0IGFueSBpbmZvcm1hdGlvbiBiZWZvcmUgeW91IHN1Ym1pdC48L3A+IjtzOjU6ImZyX0NBIjtzOjc2MjoiPHA+TWVyY2kgZGUgdm90cmUgc291bWlzc2lvbiDDoCBsYSByZXZ1ZSBKb3VybmFsIG9mIFB1YmxpYyBLbm93bGVkZ2UuIElsIHZvdXMgc2VyYSBkZW1hbmTDqSBkZSB0w6lsw6l2ZXJzZXIgZGVzIGZpY2hpZXJzLCBpZGVudGlmaWVyIGRlcyBjby1hdXRldXIudHJpY2UucyBldCBmb3VybmlyIGRlcyBpbmZvcm1hdGlvbnMgY29tbWUgbGUgdGl0cmUgZXQgbGUgcsOpc3Vtw6kuPHA+PHA+U2kgdm91cyBuZSBsJ2F2ZXogcGFzIGVuY29yZSBmYWl0LCBtZXJjaSBkZSBjb25zdWx0ZXIgbm9zIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hYm91dC9zdWJtaXNzaW9ucyIgdGFyZ2V0PSJfYmxhbmsiPlJlY29tbWFuZGF0aW9ucyBwb3VyIGxhIHNvdW1pc3Npb248L2E+LiBMb3JzcXVlIHZvdXMgcmVtcGxpc3NleiBsZXMgZm9ybXVsYWlyZXMsIG1lcmNpIGRlIGZvdXJuaXIgYXV0YW50IGRlIGTDqXRhaWxzIHF1ZSBwb3NzaWJsZSBwb3VyIGFpZGVyIG5vcyDDqWRpdGV1ci50cmljZS5zIMOgIMOpdmFsdWVyIHZvdHJlIHRyYXZhaWwuIDwvcD48cD5VbmUgZm9pcyBxdWUgdm91cyBhdmV6IGNvbW1lbmPDqSwgdm91cyBwb3V2ZXogZW5yZWdpc3RyZXIgdm90cmUgc291bWlzc2lvbiBldCB5IHJldmVuaXIgcGx1cyB0YXJkLiBWb3VzIHBvdXJyZXogYWxvcnMgcsOpdmlzZXIgZXQgbW9kaWZpZXIgdG91dGVzIGxlcyBpbmZvcm1hdGlvbnMgdm91bHVlcyBhdmFudCBkZSBzb3VtZXR0cmUgbGUgdG91dC48L3A+Ijt9czoxMjoiY29udGFjdEVtYWlsIjtzOjIwOiJydmFjYUBtYWlsaW5hdG9yLmNvbSI7czoxMToiY29udGFjdE5hbWUiO3M6MTE6IlJhbWlybyBWYWNhIjtzOjE2OiJjb250cmlidXRvcnNIZWxwIjthOjI6e3M6MjoiZW4iO3M6NTA0OiI8cD5BZGQgZGV0YWlscyBmb3IgYWxsIG9mIHRoZSBjb250cmlidXRvcnMgdG8gdGhpcyBzdWJtaXNzaW9uLiBDb250cmlidXRvcnMgYWRkZWQgaGVyZSB3aWxsIGJlIHNlbnQgYW4gZW1haWwgY29uZmlybWF0aW9uIG9mIHRoZSBzdWJtaXNzaW9uLCBhcyB3ZWxsIGFzIGEgY29weSBvZiBhbGwgZWRpdG9yaWFsIGRlY2lzaW9ucyByZWNvcmRlZCBhZ2FpbnN0IHRoaXMgc3VibWlzc2lvbi48L3A+PHA+SWYgYSBjb250cmlidXRvciBjYW4gbm90IGJlIGNvbnRhY3RlZCBieSBlbWFpbCwgYmVjYXVzZSB0aGV5IG11c3QgcmVtYWluIGFub255bW91cyBvciBkbyBub3QgaGF2ZSBhbiBlbWFpbCBhY2NvdW50LCBwbGVhc2UgZG8gbm90IGVudGVyIGEgZmFrZSBlbWFpbCBhZGRyZXNzLiBZb3UgY2FuIGFkZCBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIGNvbnRyaWJ1dG9yIGluIGEgbWVzc2FnZSB0byB0aGUgZWRpdG9yIGF0IGEgbGF0ZXIgc3RlcCBpbiB0aGUgc3VibWlzc2lvbiBwcm9jZXNzLjwvcD4iO3M6NToiZnJfQ0EiO3M6NjEzOiI8cD5Bam91dGVyIGRlcyBpbmZvcm1hdGlvbnMgcmVsYXRpdmVzIMOgIHRvdXMgbGVzIGNvbnRyaWJ1dGV1cnMudHJpY2VzIMOgIGNldHRlIHNvdW1pc3Npb24uIExlcyBjb250cmlidXRldXJzLnRyaWNlcyBham91dMOpLmUucyBpY2kgc2UgdmVycm9udCBlbnZveWVyIHVuIGNvdXJyaWVsIGRlIGNvbmZpcm1hdGlvbiBkZSBsYSBzb3VtaXNzaW9uIGFpbnNpIHF1J3VuZSBjb3BpZSBkZSB0b3V0ZXMgbGVzIGTDqWNpc2lvbnMgw6lkaXRvcmlhbGVzIGVucmVnaXN0csOpZXMgcG91ciBjZXR0ZSBzb3VtaXNzaW9uLjwvcD48cD5TaSB1bi5lIGNvbnRyaWJ1dGV1ci50cmljZSBuZSBwZXV0IMOqdHJlIGNvbnRhY3TDqS5lIHBhciBjb3VycmllbCBwYXJjZSBxdSdpbCBvdSBlbGxlIGRvaXQgZGVtZXVyZXIgYW5vbnltZSBvdSBuJ2EgcGFzIGRlIGNvbXB0ZSBkZSBtZXNzYWdlcmllLCB2ZXVpbGxleiBuZSBwYXMgZW50cmVyIGRlIGNvdXJyaWVsIGZpY3RpZi4gVm91cyBwb3V2ZXogYWpvdXRlciBkZXMgaW5mb3JtYXRpb25zIHN1ciBjZSBvdSBjZXR0ZSBjb250cmlidXRldXIudHJpY2Ugw6AgdW5lIMOpdGFwZSB1bHTDqXJpZXVyZSBkdSBwcm9jZXNzdXMgZGUgc291bWlzc2lvbi48L3A+Ijt9czo3OiJjb3VudHJ5IjtzOjI6IklTIjtzOjE3OiJkZWZhdWx0UmV2aWV3TW9kZSI7aToyO3M6MTE6ImRlc2NyaXB0aW9uIjthOjI6e3M6MjoiZW4iO3M6MTIzOiI8cD5UaGUgSm91cm5hbCBvZiBQdWJsaWMgS25vd2xlZGdlIGlzIGEgcGVlci1yZXZpZXdlZCBxdWFydGVybHkgcHVibGljYXRpb24gb24gdGhlIHN1YmplY3Qgb2YgcHVibGljIGFjY2VzcyB0byBzY2llbmNlLjwvcD4iO3M6NToiZnJfQ0EiO3M6MTQ2OiI8cD5MZSBKb3VybmFsIGRlIFB1YmxpYyBLbm93bGVkZ2UgZXN0IHVuZSBwdWJsaWNhdGlvbiB0cmltZXN0cmllbGxlIMOpdmFsdcOpZSBwYXIgbGVzIHBhaXJzIHN1ciBsZSB0aMOobWUgZGUgbCdhY2PDqHMgZHUgcHVibGljIMOgIGxhIHNjaWVuY2UuPC9wPiI7fXM6MTE6ImRldGFpbHNIZWxwIjthOjI6e3M6MjoiZW4iO3M6OTI6IjxwPlBsZWFzZSBwcm92aWRlIHRoZSBmb2xsb3dpbmcgZGV0YWlscyB0byBoZWxwIHVzIG1hbmFnZSB5b3VyIHN1Ym1pc3Npb24gaW4gb3VyIHN5c3RlbS48L3A+IjtzOjU6ImZyX0NBIjtzOjExNzoiPHA+VmV1aWxsZXogZm91cm5pciBsZXMgaW5mb3JtYXRpb25zIHN1aXZhbnRlcyBhZmluIGRlIG5vdXMgYWlkZXIgw6AgZ8OpcmVyIHZvdHJlIHNvdW1pc3Npb24gZGFucyBub3RyZSBzeXN0w6htZS48L3A+Ijt9czozMToiY29weVN1Ym1pc3Npb25BY2tQcmltYXJ5Q29udGFjdCI7YjowO3M6MjQ6ImNvcHlTdWJtaXNzaW9uQWNrQWRkcmVzcyI7czowOiIiO3M6MTQ6ImVtYWlsU2lnbmF0dXJlIjtzOjE0MToiPGJyPjxicj7igJQ8YnI+PHA+VGhpcyBpcyBhbiBhdXRvbWF0ZWQgbWVzc2FnZSBmcm9tIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZSI+Sm91cm5hbCBvZiBQdWJsaWMgS25vd2xlZGdlPC9hPi48L3A+IjtzOjEwOiJlbmFibGVEb2lzIjtiOjE7czoxMzoiZG9pU3VmZml4VHlwZSI7czo3OiJkZWZhdWx0IjtzOjE4OiJyZWdpc3RyYXRpb25BZ2VuY3kiO3M6MDoiIjtzOjE4OiJkaXNhYmxlU3VibWlzc2lvbnMiO2I6MDtzOjE5OiJlZGl0b3JpYWxTdGF0c0VtYWlsIjtiOjE7czoxNzoiZm9yVGhlRWRpdG9yc0hlbHAiO2E6Mjp7czoyOiJlbiI7czoyNzg6IjxwPlBsZWFzZSBwcm92aWRlIHRoZSBmb2xsb3dpbmcgZGV0YWlscyBpbiBvcmRlciB0byBoZWxwIG91ciBlZGl0b3JpYWwgdGVhbSBtYW5hZ2UgeW91ciBzdWJtaXNzaW9uLjwvcD48cD5XaGVuIGVudGVyaW5nIG1ldGFkYXRhLCBwcm92aWRlIGVudHJpZXMgdGhhdCB5b3UgdGhpbmsgd291bGQgYmUgbW9zdCBoZWxwZnVsIHRvIHRoZSBwZXJzb24gbWFuYWdpbmcgeW91ciBzdWJtaXNzaW9uLiBUaGlzIGluZm9ybWF0aW9uIGNhbiBiZSBjaGFuZ2VkIGJlZm9yZSBwdWJsaWNhdGlvbi48L3A+IjtzOjU6ImZyX0NBIjtzOjMyOToiPHA+UydpbCB2b3VzIHBsYcOudCwgZm91cm5pc3NleiBsZXMgZMOpdGFpbHMgc3VpdmFudHMgYWZpbiBkJ2FpZGVyIGwnw6lxdWlwZSDDqWRpdG9yaWFsZSDDoCBnw6lyZXIgdm90cmUgc291bWlzc2lvbi48L3A+PHA+RGFucyB2b3MgbcOpdGFkb25uw6llcywgYXNzdXJleiB2b3VzIGRlIGZvdXJuaXIgZGVzIGluZm9ybWF0aW9ucyBxdWUgdm91cyBwZW5zZXogcG91dm9pciDDqnRyZSB1dGlsZSDDoCBsYSBwZXJzb25uZSBxdWkgZ8OpcmVyYSB2b3RyZSBzb3VtaXNzaW9uLiBDZXR0ZSBpbmZvcm1hdGlvbiBwZXV0IMOqdHJlIGNoYW5nw6llIGF2YW50IHB1YmxpY2F0aW9uLjwvcD4iO31zOjEyOiJpdGVtc1BlclBhZ2UiO2k6MjU7czo4OiJrZXl3b3JkcyI7czo3OiJyZXF1ZXN0IjtzOjIwOiJsaWJyYXJpYW5JbmZvcm1hdGlvbiI7YToyOntzOjI6ImVuIjtzOjM2MToiV2UgZW5jb3VyYWdlIHJlc2VhcmNoIGxpYnJhcmlhbnMgdG8gbGlzdCB0aGlzIGpvdXJuYWwgYW1vbmcgdGhlaXIgbGlicmFyeSdzIGVsZWN0cm9uaWMgam91cm5hbCBob2xkaW5ncy4gQXMgd2VsbCwgaXQgbWF5IGJlIHdvcnRoIG5vdGluZyB0aGF0IHRoaXMgam91cm5hbCdzIG9wZW4gc291cmNlIHB1Ymxpc2hpbmcgc3lzdGVtIGlzIHN1aXRhYmxlIGZvciBsaWJyYXJpZXMgdG8gaG9zdCBmb3IgdGhlaXIgZmFjdWx0eSBtZW1iZXJzIHRvIHVzZSB3aXRoIGpvdXJuYWxzIHRoZXkgYXJlIGludm9sdmVkIGluIGVkaXRpbmcgKHNlZSA8YSBocmVmPSJodHRwczovL3BrcC5zZnUuY2Evb2pzIj5PcGVuIEpvdXJuYWwgU3lzdGVtczwvYT4pLiI7czo1OiJmcl9DQSI7czo0MzQ6Ik5vdXMgaW5jaXRvbnMgbGVzIGJpYmxpb3Row6ljYWlyZXMgw6AgbGlzdGVyIGNldHRlIHJldnVlIGRhbnMgbGV1ciBmb25kcyBkZSByZXZ1ZXMgbnVtw6lyaXF1ZXMuIEF1c3NpLCBpbCBwZXV0IMOqdHJlIHBlcnRpbmVudCBkZSBtZW50aW9ubmVyIHF1ZSBjZSBzeXN0w6htZSBkZSBwdWJsaWNhdGlvbiBlbiBsaWJyZSBhY2PDqHMgZXN0IGNvbsOndSBwb3VyIMOqdHJlIGjDqWJlcmfDqSBwYXIgbGVzIGJpYmxpb3Row6hxdWVzIGRlIHJlY2hlcmNoZSBwb3VyIHF1ZSBsZXMgbWVtYnJlcyBkZSBsZXVycyBmYWN1bHTDqXMgbCd1dGlsaXNlbnQgYXZlYyBsZXMgcmV2dWVzIGRhbnMgbGVzcXVlbGxlcyBlbGxlcyBvdSBpbHMgc29udCBpbXBsaXF1w6lzICh2b2lyIDxhIGhyZWY9Imh0dHBzOi8vcGtwLnNmdS5jYS9vanMiPk9wZW4gSm91cm5hbCBTeXN0ZW1zPC9hPikuIjt9czo0OiJuYW1lIjthOjI6e3M6MjoiZW4iO3M6Mjc6IkpvdXJuYWwgb2YgUHVibGljIEtub3dsZWRnZSI7czo1OiJmcl9DQSI7czozNjoiSm91cm5hbCBkZSBsYSBjb25uYWlzc2FuY2UgZHUgcHVibGljIjt9czoxNjoibm90aWZ5QWxsQXV0aG9ycyI7YjoxO3M6MTI6Im51bVBhZ2VMaW5rcyI7aToxMDtzOjE5OiJudW1XZWVrc1BlclJlc3BvbnNlIjtpOjQ7czoxNzoibnVtV2Vla3NQZXJSZXZpZXciO2k6NDtzOjI1OiJudW1SZXZpZXdlcnNQZXJTdWJtaXNzaW9uIjtpOjA7czoxNjoib3BlbkFjY2Vzc1BvbGljeSI7YToyOntzOjI6ImVuIjtzOjE3NjoiVGhpcyBqb3VybmFsIHByb3ZpZGVzIGltbWVkaWF0ZSBvcGVuIGFjY2VzcyB0byBpdHMgY29udGVudCBvbiB0aGUgcHJpbmNpcGxlIHRoYXQgbWFraW5nIHJlc2VhcmNoIGZyZWVseSBhdmFpbGFibGUgdG8gdGhlIHB1YmxpYyBzdXBwb3J0cyBhIGdyZWF0ZXIgZ2xvYmFsIGV4Y2hhbmdlIG9mIGtub3dsZWRnZS4iO3M6NToiZnJfQ0EiO3M6MjE3OiJDZXR0ZSByZXZ1ZSBmb3Vybml0IGxlIGxpYnJlIGFjY8OocyBpbW3DqWRpYXQgw6Agc29uIGNvbnRlbnUgc2UgYmFzYW50IHN1ciBsZSBwcmluY2lwZSBxdWUgcmVuZHJlIGxhIHJlY2hlcmNoZSBkaXNwb25pYmxlIGF1IHB1YmxpYyBncmF0dWl0ZW1lbnQgZmFjaWxpdGUgdW4gcGx1cyBncmFuZCDDqWNoYW5nZSBkdSBzYXZvaXIsIMOgIGwnw6ljaGVsbGUgZGUgbGEgcGxhbsOodGUuIjt9czo5OiJvcmNpZENpdHkiO3M6OToiVmFuY291dmVyIjtzOjEzOiJvcmNpZENsaWVudElkIjtzOjE4OiJBUFAteHh4eHh4eHh4eHh4eHgiO3M6MTc6Im9yY2lkQ2xpZW50U2VjcmV0IjtzOjE5OiJ4eHh4eHh4eHh4eHh4eHh4eHh4IjtzOjEyOiJvcmNpZEVuYWJsZWQiO2I6MTtzOjEzOiJvcmNpZExvZ0xldmVsIjtzOjU6IkVSUk9SIjtzOjM1OiJvcmNpZFNlbmRNYWlsVG9BdXRob3JzT25QdWJsaWNhdGlvbiI7YjoxO3M6MTY6InByaXZhY3lTdGF0ZW1lbnQiO2E6Mjp7czoyOiJlbiI7czoyMDY6IjxwPlRoZSBuYW1lcyBhbmQgZW1haWwgYWRkcmVzc2VzIGVudGVyZWQgaW4gdGhpcyBqb3VybmFsIHNpdGUgd2lsbCBiZSB1c2VkIGV4Y2x1c2l2ZWx5IGZvciB0aGUgc3RhdGVkIHB1cnBvc2VzIG9mIHRoaXMgam91cm5hbCBhbmQgd2lsbCBub3QgYmUgbWFkZSBhdmFpbGFibGUgZm9yIGFueSBvdGhlciBwdXJwb3NlIG9yIHRvIGFueSBvdGhlciBwYXJ0eS48L3A+IjtzOjU6ImZyX0NBIjtzOjE5MzoiPHA+TGVzIG5vbXMgZXQgY291cnJpZWxzIHNhaXNpcyBkYW5zIGxlIHNpdGUgZGUgY2V0dGUgcmV2dWUgc2Vyb250IHV0aWxpc8OpcyBleGNsdXNpdmVtZW50IGF1eCBmaW5zIGluZGlxdcOpZXMgcGFyIGNldHRlIHJldnVlIGV0IG5lIHNlcnZpcm9udCDDoCBhdWN1bmUgYXV0cmUgZmluLCBuaSDDoCB0b3V0ZSBhdXRyZSBwYXJ0aWUuPC9wPiI7fXM6MTc6InJlYWRlckluZm9ybWF0aW9uIjthOjI6e3M6MjoiZW4iO3M6NjU0OiJXZSBlbmNvdXJhZ2UgcmVhZGVycyB0byBzaWduIHVwIGZvciB0aGUgcHVibGlzaGluZyBub3RpZmljYXRpb24gc2VydmljZSBmb3IgdGhpcyBqb3VybmFsLiBVc2UgdGhlIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS91c2VyL3JlZ2lzdGVyIj5SZWdpc3RlcjwvYT4gbGluayBhdCB0aGUgdG9wIG9mIHRoZSBob21lIHBhZ2UgZm9yIHRoZSBqb3VybmFsLiBUaGlzIHJlZ2lzdHJhdGlvbiB3aWxsIHJlc3VsdCBpbiB0aGUgcmVhZGVyIHJlY2VpdmluZyB0aGUgVGFibGUgb2YgQ29udGVudHMgYnkgZW1haWwgZm9yIGVhY2ggbmV3IGlzc3VlIG9mIHRoZSBqb3VybmFsLiBUaGlzIGxpc3QgYWxzbyBhbGxvd3MgdGhlIGpvdXJuYWwgdG8gY2xhaW0gYSBjZXJ0YWluIGxldmVsIG9mIHN1cHBvcnQgb3IgcmVhZGVyc2hpcC4gU2VlIHRoZSBqb3VybmFsJ3MgPGEgaHJlZj0iaHR0cDovL2xvY2FsaG9zdC9pbmRleC5waHAvcHVibGlja25vd2xlZGdlL2Fib3V0L3N1Ym1pc3Npb25zI3ByaXZhY3lTdGF0ZW1lbnQiPlByaXZhY3kgU3RhdGVtZW50PC9hPiwgd2hpY2ggYXNzdXJlcyByZWFkZXJzIHRoYXQgdGhlaXIgbmFtZSBhbmQgZW1haWwgYWRkcmVzcyB3aWxsIG5vdCBiZSB1c2VkIGZvciBvdGhlciBwdXJwb3Nlcy4iO3M6NToiZnJfQ0EiO3M6NzE2OiJOb3VzIGludml0b25zIGxlcyBsZWN0ZXVycy10cmljZXMgw6AgcydpbnNjcmlyZSBwb3VyIHJlY2V2b2lyIGxlcyBhdmlzIGRlIHB1YmxpY2F0aW9uIGRlIGNldHRlIHJldnVlLiBVdGlsaXNlciBsZSBsaWVuIDxhIGhyZWY9Imh0dHA6Ly9sb2NhbGhvc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS91c2VyL3JlZ2lzdGVyIj5TJ2luc2NyaXJlPC9hPiBlbiBoYXV0IGRlIGxhIHBhZ2UgZCdhY2N1ZWlsIGRlIGxhIHJldnVlLiBDZXR0ZSBpbnNjcmlwdGlvbiBwZXJtZXR0cmEgYXUsw6AgbGEgbGVjdGV1ci10cmljZSBkZSByZWNldm9pciBwYXIgY291cnJpZWwgbGUgc29tbWFpcmUgZGUgY2hhcXVlIG5vdXZlYXUgbnVtw6lybyBkZSBsYSByZXZ1ZS4gQ2V0dGUgbGlzdGUgcGVybWV0IGF1c3NpIMOgIGxhIHJldnVlIGRlIHJldmVuZGlxdWVyIHVuIGNlcnRhaW4gbml2ZWF1IGRlIHNvdXRpZW4gb3UgZGUgbGVjdG9yYXQuIFZvaXIgbGEgPGEgaHJlZj0iaHR0cDovL2xvY2FsaG9zdC9pbmRleC5waHAvcHVibGlja25vd2xlZGdlL2Fib3V0L3N1Ym1pc3Npb25zI3ByaXZhY3lTdGF0ZW1lbnQiPkTDqWNsYXJhdGlvbiBkZSBjb25maWRlbnRpYWxpdMOpPC9hPiBkZSBsYSByZXZ1ZSBxdWkgY2VydGlmaWUgYXV4IGxlY3RldXJzLXRyaWNlcyBxdWUgbGV1ciBub20gZXQgbGV1ciBjb3VycmllbCBuZSBzZXJvbnQgcGFzIHV0aWxpc8OpcyDDoCBkJ2F1dHJlcyBmaW5zLiI7fXM6MTA6InJldmlld0hlbHAiO2E6Mjp7czoyOiJlbiI7czozNjg6IjxwPlJldmlldyB0aGUgaW5mb3JtYXRpb24geW91IGhhdmUgZW50ZXJlZCBiZWZvcmUgeW91IGNvbXBsZXRlIHlvdXIgc3VibWlzc2lvbi4gWW91IGNhbiBjaGFuZ2UgYW55IG9mIHRoZSBkZXRhaWxzIGRpc3BsYXllZCBoZXJlIGJ5IGNsaWNraW5nIHRoZSBlZGl0IGJ1dHRvbiBhdCB0aGUgdG9wIG9mIGVhY2ggc2VjdGlvbi48L3A+PHA+T25jZSB5b3UgY29tcGxldGUgeW91ciBzdWJtaXNzaW9uLCBhIG1lbWJlciBvZiBvdXIgZWRpdG9yaWFsIHRlYW0gd2lsbCBiZSBhc3NpZ25lZCB0byByZXZpZXcgaXQuIFBsZWFzZSBlbnN1cmUgdGhlIGRldGFpbHMgeW91IGhhdmUgZW50ZXJlZCBoZXJlIGFyZSBhcyBhY2N1cmF0ZSBhcyBwb3NzaWJsZS48L3A+IjtzOjU6ImZyX0NBIjtzOjQwMjoiPHA+UsOpdmlzZXogbCdpbmZvcm1hdGlvbiBxdWUgdm91cyBhdmV6IGZvdXJuaSBhdmFudCBkZSBmaW5hbGlzZXIgdm90cmUgc291bWlzc2lvbi4gVm91cyBwb3V2ZXogbW9kaWZpZXIgY2hhcXVlIGTDqXRhaWxzIGFmZmljaMOpcyBlbiBjbGlxdWFudCBzdXIgbGUgYm91dG9uIGQnw6lkaXRpb24gZW4gaGF1dCBkZSBjaGFxdWUgc2VjdGlvbi48L3A+PHA+VW5lIGZvaXMgdm90cmUgc291bWlzc2lvbiB0cmFuc21pc2UsIHVuIG1lbWJyZSBkZSBsJ8OpcXVpcGUgw6lkaXRvcmlhbGUgbHVpIHNlcmEgYXNzaWduw6kgYWZpbiBkZSBsJ8OpdmFsdWVyLiBTJ2lsIHZvdXMgcGxhw650LCBhc3N1cmV6IHZvdXMgcXVlIGxlcyBkw6l0YWlscyBmb3VybmlzIHNvbnQgbGUgcGx1cyBleGFjdGVzIHBvc3NpYmxlcy48L3A+Ijt9czoyNToic3VibWlzc2lvbkFja25vd2xlZGdlbWVudCI7czoxMDoiYWxsQXV0aG9ycyI7czoxOToic3VibWlzc2lvbkNoZWNrbGlzdCI7YToyOntzOjI6ImVuIjtzOjU5MToiPHA+QWxsIHN1Ym1pc3Npb25zIG11c3QgbWVldCB0aGUgZm9sbG93aW5nIHJlcXVpcmVtZW50cy48L3A+PHVsPjxsaT5UaGlzIHN1Ym1pc3Npb24gbWVldHMgdGhlIHJlcXVpcmVtZW50cyBvdXRsaW5lZCBpbiB0aGUgPGEgaHJlZj0iaHR0cDovL2xvY2FsaG9zdC9pbmRleC5waHAvcHVibGlja25vd2xlZGdlL2Fib3V0L3N1Ym1pc3Npb25zIj5BdXRob3IgR3VpZGVsaW5lczwvYT4uPC9saT48bGk+VGhpcyBzdWJtaXNzaW9uIGhhcyBub3QgYmVlbiBwcmV2aW91c2x5IHB1Ymxpc2hlZCwgbm9yIGlzIGl0IGJlZm9yZSBhbm90aGVyIGpvdXJuYWwgZm9yIGNvbnNpZGVyYXRpb24uPC9saT48bGk+QWxsIHJlZmVyZW5jZXMgaGF2ZSBiZWVuIGNoZWNrZWQgZm9yIGFjY3VyYWN5IGFuZCBjb21wbGV0ZW5lc3MuPC9saT48bGk+QWxsIHRhYmxlcyBhbmQgZmlndXJlcyBoYXZlIGJlZW4gbnVtYmVyZWQgYW5kIGxhYmVsZWQuPC9saT48bGk+UGVybWlzc2lvbiBoYXMgYmVlbiBvYnRhaW5lZCB0byBwdWJsaXNoIGFsbCBwaG90b3MsIGRhdGFzZXRzIGFuZCBvdGhlciBtYXRlcmlhbCBwcm92aWRlZCB3aXRoIHRoaXMgc3VibWlzc2lvbi48L2xpPjwvdWw+IjtzOjU6ImZyX0NBIjtzOjY0MzoiPHA+VG91dGVzIGxlcyBzb3VtaXNzaW9ucyBkb2l2ZW50IHLDqXBvbmRyZSBhdXggZXhpZ2VuY2VzIHN1aXZhbnRlcyA6IDwvcD48dWw+PGxpPkNldHRlIHNvdW1pc3Npb24gcsOpcG9uZCBhdXggZXhpZ2VuY2VzIGTDqWZpbmllcyBkYW5zIGxlcyA8YSBocmVmPSJodHRwOi8vbG9jYWxob3N0L2luZGV4LnBocC9wdWJsaWNrbm93bGVkZ2UvYWJvdXQvc3VibWlzc2lvbnMiPmRpcmVjdGl2ZXMgYXV4IGF1dGV1ci5lLnM8L2E+LjwvbGk+PGxpPkNldHRlIHNvdW1pc3Npb24gbidhIG5pIMOpdMOpIHB1Ymxpw6llIHByw6ljw6lkZW1tZW50LCBuaSDDqXTDqSBzb3VtaXNlIMOgIHVuZSBhdXRyZSByZXZ1ZS48L2xpPjxsaT5Ub3V0ZXMgbGVzIHLDqWbDqXJlbmNlcyBvbnQgw6l0w6kgdsOpcmlmacOpZXMgZXQgc29udCBleGFjdGVzLjwvbGk+PGxpPlRvdXMgbGVzIHRhYmxlYXV4IGV0IGZpZ3VyZXMgc29udCBudW3DqXJvdMOpcyBldCBkw6lmaW5pcy48L2xpPjxsaT5MJ2F1dG9yaXNhdGlvbiBkZSBwdWJsaWVyIHRvdXRlcyBsZXMgcGhvdG9zLCB0b3VzIGxlcyBlbnNlbWJsZXMgZGUgZG9ubsOpZXMgZXQgdG91dCBhdXRyZSBtYXTDqXJpZWwgZm91cm5pIGF2ZWMgY2V0dGUgc291bWlzc2lvbiBhIMOpdMOpIG9idGVudWUuPC9saT48L3VsPiI7fXM6MjA6InN1Ym1pdFdpdGhDYXRlZ29yaWVzIjtiOjA7czozMToic3VwcG9ydGVkQWRkZWRTdWJtaXNzaW9uTG9jYWxlcyI7YToyOntpOjA7czoyOiJlbiI7aToxO3M6NToiZnJfQ0EiO31zOjMyOiJzdXBwb3J0ZWREZWZhdWx0U3VibWlzc2lvbkxvY2FsZSI7czoyOiJlbiI7czoyMDoic3VwcG9ydGVkRm9ybUxvY2FsZXMiO2E6Mjp7aTowO3M6MjoiZW4iO2k6MTtzOjU6ImZyX0NBIjt9czoxNjoic3VwcG9ydGVkTG9jYWxlcyI7YToyOntpOjA7czoyOiJlbiI7aToxO3M6NToiZnJfQ0EiO31zOjI2OiJzdXBwb3J0ZWRTdWJtaXNzaW9uTG9jYWxlcyI7YToyOntpOjA7czoyOiJlbiI7aToxO3M6NToiZnJfQ0EiO31zOjM0OiJzdXBwb3J0ZWRTdWJtaXNzaW9uTWV0YWRhdGFMb2NhbGVzIjthOjI6e2k6MDtzOjI6ImVuIjtpOjE7czo1OiJmcl9DQSI7fXM6MTU6InRoZW1lUGx1Z2luUGF0aCI7czo3OiJkZWZhdWx0IjtzOjE1OiJ1cGxvYWRGaWxlc0hlbHAiO2E6Mjp7czoyOiJlbiI7czoyNDk6IjxwPlByb3ZpZGUgYW55IGZpbGVzIG91ciBlZGl0b3JpYWwgdGVhbSBtYXkgbmVlZCB0byBldmFsdWF0ZSB5b3VyIHN1Ym1pc3Npb24uIEluIGFkZGl0aW9uIHRvIHRoZSBtYWluIHdvcmssIHlvdSBtYXkgd2lzaCB0byBzdWJtaXQgZGF0YSBzZXRzLCBjb25mbGljdCBvZiBpbnRlcmVzdCBzdGF0ZW1lbnRzLCBvciBvdGhlciBzdXBwbGVtZW50YXJ5IGZpbGVzIGlmIHRoZXNlIHdpbGwgYmUgaGVscGZ1bCBmb3Igb3VyIGVkaXRvcnMuPC9wPiI7czo1OiJmcl9DQSI7czozMTc6IjxwPiBGb3VybmlyIHRvdXMgbGVzIGZpY2hpZXJzIGRvbnQgbm90cmUgw6lxdWlwZSDDqWRpdG9yaWFsZSBwb3VycmFpdCBhdm9pciBiZXNvaW4gcG91ciDDqXZhbHVlciB2b3RyZSBzb3VtaXNzaW9uLiBFbiBwbHVzIGR1IGZpY2hpZXIgcHJpbmNpcGFsLCB2b3VzIHBvdXZleiBzb3VtZXR0cmUgZGVzIGVuc2VtYmxlcyBkZSBkb25uw6llcywgdW5lIGTDqWNsYXJhdGlvbiByZWxhdGl2ZSBhdSBjb25mbGl0IGQnaW50w6lyw6p0IG91IHRvdXQgYXV0cmUgZmljaGllciBwb3RlbnRpZWxsZW1lbnQgdXRpbGUgcG91ciBub3Mgw6lkaXRldXIudHJpY2Uucy48L3A+Ijt9czoxOToiZW5hYmxlR2VvVXNhZ2VTdGF0cyI7czo4OiJkaXNhYmxlZCI7czoyNzoiZW5hYmxlSW5zdGl0dXRpb25Vc2FnZVN0YXRzIjtiOjA7czoxNjoiaXNTdXNoaUFwaVB1YmxpYyI7YjoxO3M6MTQ6ImNsb2Nrc3NMaWNlbnNlIjthOjI6e3M6MjoiZW4iO3M6MjcxOiJUaGlzIGpvdXJuYWwgdXRpbGl6ZXMgdGhlIENMT0NLU1Mgc3lzdGVtIHRvIGNyZWF0ZSBhIGRpc3RyaWJ1dGVkIGFyY2hpdmluZyBzeXN0ZW0gYW1vbmcgcGFydGljaXBhdGluZyBsaWJyYXJpZXMgYW5kIHBlcm1pdHMgdGhvc2UgbGlicmFyaWVzIHRvIGNyZWF0ZSBwZXJtYW5lbnQgYXJjaGl2ZXMgb2YgdGhlIGpvdXJuYWwgZm9yIHB1cnBvc2VzIG9mIHByZXNlcnZhdGlvbiBhbmQgcmVzdG9yYXRpb24uIDxhIGhyZWY9Imh0dHBzOi8vY2xvY2tzcy5vcmciPk1vcmUuLi48L2E+IjtzOjU6ImZyX0NBIjtzOjMxNToiQ2V0dGUgcmV2dWUgdXRpbGlzZSBsZSBzeXN0w6htZSBDTE9DS1NTIHBvdXIgY3LDqWVyIHVuIHN5c3TDqG1lIGQnYXJjaGl2YWdlIGRpc3RyaWJ1w6kgcGFybWkgbGVzIGJpYmxpb3Row6hxdWVzIHBhcnRpY2lwYW50ZXMgZXQgcGVybWV0IMOgIGNlcyBiaWJsaW90aMOocXVlcyBkZSBjcsOpZXIgZGVzIGFyY2hpdmVzIHBlcm1hbmVudGVzIGRlIGxhIHJldnVlIMOgIGRlcyBmaW5zIGRlIGNvbnNlcnZhdGlvbiBldCBkZSByZWNvbnN0aXR1dGlvbi4gPGEgaHJlZj0iaHR0cHM6Ly9jbG9ja3NzLm9yZyI+RW4gYXBwcmVuZHJlIGRhdmFudGFnZS4uLiA8L2E+Ijt9czoxODoiY29weXJpZ2h0WWVhckJhc2lzIjtzOjU6Imlzc3VlIjtzOjE1OiJlbmFibGVkRG9pVHlwZXMiO2E6MTp7aTowO3M6MTE6InB1YmxpY2F0aW9uIjt9czoxNToiZG9pQ3JlYXRpb25UaW1lIjtzOjIwOiJjb3B5RWRpdENyZWF0aW9uVGltZSI7czo5OiJlbmFibGVPYWkiO2I6MTtzOjEzOiJsb2Nrc3NMaWNlbnNlIjthOjI6e3M6MjoiZW4iO3M6MjczOiJUaGlzIGpvdXJuYWwgdXRpbGl6ZXMgdGhlIExPQ0tTUyBzeXN0ZW0gdG8gY3JlYXRlIGEgZGlzdHJpYnV0ZWQgYXJjaGl2aW5nIHN5c3RlbSBhbW9uZyBwYXJ0aWNpcGF0aW5nIGxpYnJhcmllcyBhbmQgcGVybWl0cyB0aG9zZSBsaWJyYXJpZXMgdG8gY3JlYXRlIHBlcm1hbmVudCBhcmNoaXZlcyBvZiB0aGUgam91cm5hbCBmb3IgcHVycG9zZXMgb2YgcHJlc2VydmF0aW9uIGFuZCByZXN0b3JhdGlvbi4gPGEgaHJlZj0iaHR0cHM6Ly93d3cubG9ja3NzLm9yZyI+TW9yZS4uLjwvYT4iO3M6NToiZnJfQ0EiO3M6MzE0OiJDZXR0ZSByZXZ1ZSB1dGlsaXNlIGxlIHN5c3TDqG1lIExPQ0tTUyBwb3VyIGNyw6llciB1biBzeXN0w6htZSBkZSBkaXN0cmlidXRpb24gZGVzIGFyY2hpdmVzIHBhcm1pIGxlcyBiaWJsaW90aMOocXVlcyBwYXJ0aWNpcGFudGVzIGV0IGFmaW4gZGUgcGVybWV0dHJlIMOgIGNlcyBiaWJsaW90aMOocXVlcyBkZSBjcsOpZXIgZGVzIGFyY2hpdmVzIHBlcm1hbmVudGVzIHBvdXIgZmlucyBkZSBwcsOpc2VydmF0aW9uIGV0IGRlIHJlc3RhdXJhdGlvbi4gPGEgaHJlZj0iaHR0cHM6Ly9sb2Nrc3Mub3JnIj5FbiBhcHByZW5kcmUgZGF2YW50YWdlLi4uPC9hPiI7fXM6MTM6Im1lbWJlcnNoaXBGZWUiO2Q6MDtzOjE0OiJwdWJsaWNhdGlvbkZlZSI7ZDowO3M6MTg6InB1cmNoYXNlQXJ0aWNsZUZlZSI7ZDowO3M6MTM6ImRvaVZlcnNpb25pbmciO2I6MDtzOjEzOiJjdXN0b21IZWFkZXJzIjthOjE6e3M6MjoiZW4iO3M6NDE6IjxtZXRhIG5hbWU9InBrcCIgY29udGVudD0iVGVzdCBtZXRhdGFnLiI+Ijt9czoxNzoic2VhcmNoRGVzY3JpcHRpb24iO2E6MTp7czoyOiJlbiI7czoxMTY6IlRoZSBKb3VybmFsIG9mIFB1YmxpYyBLbm93bGVkZ2UgaXMgYSBwZWVyLXJldmlld2VkIHF1YXJ0ZXJseSBwdWJsaWNhdGlvbiBvbiB0aGUgc3ViamVjdCBvZiBwdWJsaWMgYWNjZXNzIHRvIHNjaWVuY2UuIjt9czoxMjoiYWJicmV2aWF0aW9uIjthOjE6e3M6MjoiZW4iO3M6MjU6InB1YmxpY2tub3dsZWRnZUogUHViIEtub3ciO31zOjEwOiJvbmxpbmVJc3NuIjtzOjk6IjAzNzgtNTk1NSI7czo5OiJwcmludElzc24iO3M6OToiMDM3OC01OTU1IjtzOjIwOiJwdWJsaXNoZXJJbnN0aXR1dGlvbiI7czoyNDoiUHVibGljIEtub3dsZWRnZSBQcm9qZWN0IjtzOjE0OiJtYWlsaW5nQWRkcmVzcyI7czo0OToiMTIzIDQ1NnRoIFN0cmVldApCdXJuYWJ5LCBCcml0aXNoIENvbHVtYmlhCkNhbmFkYSI7czoxMjoic3VwcG9ydEVtYWlsIjtzOjIwOiJydmFjYUBtYWlsaW5hdG9yLmNvbSI7czoxMToic3VwcG9ydE5hbWUiO3M6MTE6IlJhbWlybyBWYWNhIjtzOjEyOiJvcmNpZEFwaVR5cGUiO3M6MTM6Im1lbWJlclNhbmRib3giO31zOjIwOiJfaGFzTG9hZGFibGVBZGFwdGVycyI7YjowO3M6Mjc6Il9tZXRhZGF0YUV4dHJhY3Rpb25BZGFwdGVycyI7YTowOnt9czoyNToiX2V4dHJhY3Rpb25BZGFwdGVyc0xvYWRlZCI7YjowO3M6MjY6Il9tZXRhZGF0YUluamVjdGlvbkFkYXB0ZXJzIjthOjA6e31zOjI0OiJfaW5qZWN0aW9uQWRhcHRlcnNMb2FkZWQiO2I6MDtzOjEzOiJfbG9jYWxlc1RhYmxlIjthOjk6e3M6MTE6ImJlQGN5cmlsbGljIjtzOjI6ImJlIjtzOjI6ImJzIjtzOjc6ImJzX0xhdG4iO3M6NToiZnJfRlIiO3M6MjoiZnIiO3M6MjoibmIiO3M6NToibmJfTk8iO3M6MTE6InNyQGN5cmlsbGljIjtzOjc6InNyX0N5cmwiO3M6ODoic3JAbGF0aW4iO3M6Nzoic3JfTGF0biI7czoxMToidXpAY3lyaWxsaWMiO3M6MjoidXoiO3M6ODoidXpAbGF0aW4iO3M6NzoidXpfTGF0biI7czo1OiJ6aF9DTiI7czo3OiJ6aF9IYW5zIjt9fXM6NDg6IgBQS1Bcam9ic1xvcmNpZFxEZXBvc2l0T3JjaWRTdWJtaXNzaW9uAG9yY2lkV29yayI7YToxMDp7czo1OiJ0aXRsZSI7YToyOntzOjU6InRpdGxlIjthOjE6e3M6NToidmFsdWUiO3M6MTM3OiJBbnRpbWljcm9iaWFsLCBoZWF2eSBtZXRhbCByZXNpc3RhbmNlIGFuZCBwbGFzbWlkIHByb2ZpbGUgb2YgY29saWZvcm1zIGlzb2xhdGVkIGZyb20gbm9zb2NvbWlhbCBpbmZlY3Rpb25zIGluIGEgaG9zcGl0YWwgaW4gSXNmYWhhbiwgSXJhbiI7fXM6ODoic3VidGl0bGUiO2E6MTp7czo1OiJ2YWx1ZSI7czowOiIiO319czoxMzoiam91cm5hbC10aXRsZSI7YToxOntzOjU6InZhbHVlIjtzOjI3OiJKb3VybmFsIG9mIFB1YmxpYyBLbm93bGVkZ2UiO31zOjE3OiJzaG9ydC1kZXNjcmlwdGlvbiI7czoxMTU2OiJUaGUgYW50aW1pY3JvYmlhbCwgaGVhdnkgbWV0YWwgcmVzaXN0YW5jZSBwYXR0ZXJucyBhbmQgcGxhc21pZCBwcm9maWxlcyBvZiBDb2xpZm9ybXMgKEVudGVyb2JhY3RlcmlhY2VhKSBpc29sYXRlZCBmcm9tIG5vc29jb21pYWwgaW5mZWN0aW9ucyBhbmQgaGVhbHRoeSBodW1hbiBmYWVjZXMgd2VyZSBjb21wYXJlZC4gRmlmdGVlbiBvZiB0aGUgMjUgaXNvbGF0ZXMgZnJvbSBub3NvY29taWFsIGluZmVjdGlvbnMgd2VyZSBpZGVudGlmaWVkIGFzIEVzY2hlcmljaGlhIGNvbGksIGFuZCByZW1haW5pbmcgYXMgS2VsZWJzaWVsbGEgcG5ldW1vbmlhZS4gU2V2ZW50eSB0d28gcGVyY2VudCBvZiB0aGUgc3RyYWlucyBpc29sYXRlZCBmcm9tIG5vc29jb21pYWwgaW5mZWN0aW9ucyBwb3NzZXNzIG11bHRpcGxlIHJlc2lzdGFuY2UgdG8gYW50aWJpb3RpY3MgY29tcGFyZWQgdG8gNDUlIG9mIHN0cmFpbnMgZnJvbSBoZWFsdGh5IGh1bWFuIGZhZWNlcy4gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBtaW5pbWFsIGluaGliaXRvcnkgY29uY2VudHJhdGlvbiAoTUlDKSB2YWx1ZXMgb2Ygc3RyYWlucyBmcm9tIGNsaW5pY2FsIGNhc2VzIGFuZCBmcm9tIGZhZWNlcyBmb3IgZm91ciBoZWF2eSBtZXRhbHMgKEhnLCBDdSwgUGIsIENkKSB3YXMgbm90IHNpZ25pZmljYW50LiBIb3dldmVyIG1vc3Qgc3RyYWlucyBpc29sYXRlZCBmcm9tIGhvc3BpdGFsIHdlcmUgbW9yZSB0b2xlcmFudCB0byBoZWF2eSBtZXRhbCB0aGFuIHRob3NlIGZyb20gaGVhbHRoeSBwZXJzb25zLiBUaGVyZSB3YXMgbm8gY29uc2lzdGVudCByZWxhdGlvbnNoaXAgYmV0d2VlbiBwbGFzbWlkIHByb2ZpbGUgZ3JvdXAgYW5kIGFudGltaWNyb2JpYWwgcmVzaXN0YW5jZSBwYXR0ZXJuLCBhbHRob3VnaCBhIGNvbmp1Z2F0aXZlIHBsYXNtaWQgKD41Ni40IGtiKSBlbmNvZGluZyByZXNpc3RhbmNlIHRvIGhlYXZ5IG1ldGFscyBhbmQgYW50aWJpb3RpY3Mgd2FzIHJlY292ZXJlZCBmcm9tIGVpZ2h0IG9mIHRoZSBzdHJhaW5zIGlzb2xhdGVkIGZyb20gbm9zb2NvbWlhbCBpbmZlY3Rpb25zLiBUaGUgcmVzdWx0cyBpbmRpY2F0ZSBtdWx0aWRydWctcmVzaXN0YW5jZSBjb2xpZm9ybXMgYXMgYSBwb3RlbnRpYWwgY2F1c2Ugb2Ygbm9zb2NvbWlhbCBpbmZlY3Rpb24gaW4gdGhpcyByZWdpb24uIjtzOjEyOiJleHRlcm5hbC1pZHMiO2E6MTp7czoxMToiZXh0ZXJuYWwtaWQiO2E6Mjp7aTowO2E6Mzp7czoxNjoiZXh0ZXJuYWwtaWQtdHlwZSI7czozOiJ1cmkiO3M6MTc6ImV4dGVybmFsLWlkLXZhbHVlIjtzOjYwOiJodHRwOi8vb2pzZGV2LnRlc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hcnRpY2xlL3ZpZXcvMTciO3M6MjQ6ImV4dGVybmFsLWlkLXJlbGF0aW9uc2hpcCI7czo0OiJzZWxmIjt9aToxO2E6Mzp7czoxNjoiZXh0ZXJuYWwtaWQtdHlwZSI7czo0OiJpc3NuIjtzOjE3OiJleHRlcm5hbC1pZC12YWx1ZSI7czo5OiIwMzc4LTU5NTUiO3M6MjQ6ImV4dGVybmFsLWlkLXJlbGF0aW9uc2hpcCI7czo3OiJwYXJ0LW9mIjt9fX1zOjE2OiJwdWJsaWNhdGlvbi1kYXRlIjthOjM6e3M6NDoieWVhciI7YToxOntzOjU6InZhbHVlIjtzOjQ6IjIwMjQiO31zOjU6Im1vbnRoIjthOjE6e3M6NToidmFsdWUiO3M6MjoiMDciO31zOjM6ImRheSI7YToxOntzOjU6InZhbHVlIjtzOjI6IjAzIjt9fXM6MzoidXJsIjtzOjYwOiJodHRwOi8vb2pzZGV2LnRlc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hcnRpY2xlL3ZpZXcvMTciO3M6MTM6Imxhbmd1YWdlLWNvZGUiO3M6MjoiZW4iO3M6MTI6ImNvbnRyaWJ1dG9ycyI7YToxOntzOjExOiJjb250cmlidXRvciI7YToxOntpOjA7YTozOntzOjExOiJjcmVkaXQtbmFtZSI7czoxOToiVmFqaWhlaCBLYXJiYXNpemFlZCI7czoyMjoiY29udHJpYnV0b3ItYXR0cmlidXRlcyI7YToyOntzOjIwOiJjb250cmlidXRvci1zZXF1ZW5jZSI7czo1OiJmaXJzdCI7czoxNjoiY29udHJpYnV0b3Itcm9sZSI7czo2OiJBVVRIT1IiO31zOjE3OiJjb250cmlidXRvci1vcmNpZCI7YTozOntzOjM6InVyaSI7czozNzoiaHR0cHM6Ly9vcmNpZC5vcmcvMDAwMC0wMDAyLTE4MjUtMDA5NyI7czo0OiJwYXRoIjtzOjE5OiIwMDAwLTAwMDItMTgyNS0wMDk3IjtzOjQ6Imhvc3QiO3M6OToib3JjaWQub3JnIjt9fX19czo4OiJjaXRhdGlvbiI7YToyOntzOjEzOiJjaXRhdGlvbi10eXBlIjtzOjY6ImJpYnRleCI7czoxNDoiY2l0YXRpb24tdmFsdWUiO3M6MTQ5MToiQGFydGljbGV7QW50aW1pY3JvYmlhbCwgaGVhdnkgbWV0YWwgcmVzaXN0YW5jZSBhbmQgcGxhc21pZCBwcm9maWxlIG9mIGNvbGlmb3JtcyBpc29sYXRlZCBmcm9tIG5vc29jb21pYWwgaW5mZWN0aW9ucyBpbiBhIGhvc3BpdGFsIGluIElzZmFoYW4sIElyYW5fMjAyNCwgdm9sdW1lPXsxfSwgdXJsPXtodHRwOi8vb2pzZGV2LnRlc3QvaW5kZXgucGhwL3B1YmxpY2tub3dsZWRnZS9hcnRpY2xlL3ZpZXcvMTd9LCBhYnN0cmFjdE5vdGU9e1RoZSBhbnRpbWljcm9iaWFsLCBoZWF2eSBtZXRhbCByZXNpc3RhbmNlIHBhdHRlcm5zIGFuZCBwbGFzbWlkIHByb2ZpbGVzIG9mIENvbGlmb3JtcyAoRW50ZXJvYmFjdGVyaWFjZWEpIGlzb2xhdGVkIGZyb20gbm9zb2NvbWlhbCBpbmZlY3Rpb25zIGFuZCBoZWFsdGh5IGh1bWFuIGZhZWNlcyB3ZXJlIGNvbXBhcmVkLiBGaWZ0ZWVuIG9mIHRoZSAyNSBpc29sYXRlcyBmcm9tIG5vc29jb21pYWwgaW5mZWN0aW9ucyB3ZXJlIGlkZW50aWZpZWQgYXMgRXNjaGVyaWNoaWEgY29saSwgYW5kIHJlbWFpbmluZyBhcyBLZWxlYnNpZWxsYSBwbmV1bW9uaWFlLiBTZXZlbnR5IHR3byBwZXJjZW50IG9mIHRoZSBzdHJhaW5zIGlzb2xhdGVkIGZyb20gbm9zb2NvbWlhbCBpbmZlY3Rpb25zIHBvc3Nlc3MgbXVsdGlwbGUgcmVzaXN0YW5jZSB0byBhbnRpYmlvdGljcyBjb21wYXJlZCB0byA0NSUgb2Ygc3RyYWlucyBmcm9tIGhlYWx0aHkgaHVtYW4gZmFlY2VzLiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG1pbmltYWwgaW5oaWJpdG9yeSBjb25jZW50cmF0aW9uIChNSUMpIHZhbHVlcyBvZiBzdHJhaW5zIGZyb20gY2xpbmljYWwgY2FzZXMgYW5kIGZyb20gZmFlY2VzIGZvciBmb3VyIGhlYXZ5IG1ldGFscyAoSGcsIEN1LCBQYiwgQ2QpIHdhcyBub3Qgc2lnbmlmaWNhbnQuIEhvd2V2ZXIgbW9zdCBzdHJhaW5zIGlzb2xhdGVkIGZyb20gaG9zcGl0YWwgd2VyZSBtb3JlIHRvbGVyYW50IHRvIGhlYXZ5IG1ldGFsIHRoYW4gdGhvc2UgZnJvbSBoZWFsdGh5IHBlcnNvbnMuIFRoZXJlIHdhcyBubyBjb25zaXN0ZW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHBsYXNtaWQgcHJvZmlsZSBncm91cCBhbmQgYW50aW1pY3JvYmlhbCByZXNpc3RhbmNlIHBhdHRlcm4sIGFsdGhvdWdoIGEgY29uanVnYXRpdmUgcGxhc21pZCAoJmFtcDtndDs1Ni40IGtiKSBlbmNvZGluZyByZXNpc3RhbmNlIHRvIGhlYXZ5IG1ldGFscyBhbmQgYW50aWJpb3RpY3Mgd2FzIHJlY292ZXJlZCBmcm9tIGVpZ2h0IG9mIHRoZSBzdHJhaW5zIGlzb2xhdGVkIGZyb20gbm9zb2NvbWlhbCBpbmZlY3Rpb25zLiBUaGUgcmVzdWx0cyBpbmRpY2F0ZSBtdWx0aWRydWctcmVzaXN0YW5jZSBjb2xpZm9ybXMgYXMgYSBwb3RlbnRpYWwgY2F1c2Ugb2Ygbm9zb2NvbWlhbCBpbmZlY3Rpb24gaW4gdGhpcyByZWdpb24ufSwgbnVtYmVyPXsyfSwgam91cm5hbD17Sm91cm5hbCBvZiBQdWJsaWMgS25vd2xlZGdlfSwgeWVhcj17MjAyNH0sIG1vbnRoPXtKdWwufSB9Ijt9czo0OiJ0eXBlIjtzOjE1OiJqb3VybmFsLWFydGljbGUiO31zOjUwOiIAUEtQXGpvYnNcb3JjaWRcRGVwb3NpdE9yY2lkU3VibWlzc2lvbgBhdXRob3JPcmNpZCI7czoxOToiMDAwMC0wMDAyLTE4MjUtMDA5NyI7czoxMDoiY29ubmVjdGlvbiI7czo4OiJkYXRhYmFzZSI7czo1OiJxdWV1ZSI7czo1OiJxdWV1ZSI7fQ==';

    /**
     * Test job is a proper instance
     */
    public function testUnserializeGetProperJobInstance(): void
    {
        $this->assertInstanceOf(
            DepositOrcidSubmission::class,
            unserialize(base64_decode($this->serializedJobData)),
        );
    }

    public function testRunSerializedJob(): void
    {
        $this->mockGuzzleClient();

        /** @var DepositOrcidSubmission $depositOrcidSubmissionJob */
        $depositOrcidSubmissionJob = unserialize(base64_decode($this->serializedJobData));

        $this->assertNull($depositOrcidSubmissionJob->handle());
    }
}
